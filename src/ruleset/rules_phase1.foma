#3.1: remove silent stuff
define RemoveSilent         WithAnt("\si", [\"}"]*) -> 0; #[\"}"]* instead of ?* to not overmatch to other annotations eg \si{a}\opq{b}
define Phase31 RemoveSilent;

#3.2: Separate segments with spaces /stress symbols
#Some of these stress markers come from rules in 3.6
define StressT(S)               " " S " ";
define TransformApostrophe      "'" -> "-" || _ \AnyAntR(r) .o. "'" -> 0; #If it's before an r, ' shouldn't seperate segs
define TransformHyphen          "-" -> "\sel" "{" "}" || NotInAntL _;
define SegSepAnt(AN)            [EAnt(AN) | WithAnt(AN, ["-"|"'"])];

define SplitUnstressed          SegSepAnt("\se")  -> StressT("-");
define SplitLeftPrimaryStress   SegSepAnt("\sel") -> StressT("<-") || NotInAntL _;
define SplitRightPrimaryStress  SegSepAnt("\ser") -> StressT("->");
define SplitLeftSecondaryStress SegSepAnt("\selr") -> StressT("<<-");
define SplitRightSecondaryStress SegSepAnt("\serl") -> StressT("->>");

#Wire it together in parallel
define SplitSegments            TransformApostrophe .o. TransformHyphen .o. [SplitUnstressed .o. SplitLeftPrimaryStress
                                .o. SplitRightPrimaryStress .o. SplitLeftSecondaryStress .o. SplitRightSecondaryStress];
define Phase32 SplitSegments;

#3.3: Apply critical digraphs
#first: ng -> \co{n} if not followed by l or r
define NgReplace1   "n" "g"     -> WithAntR("\co", "n")  || NotInAntL _ [SegBoundary | AnyAntR([EarlyConsonant & \"l" & \"r"])];
#next: ng -> nj if followed by e, i or y
define NgReplace2   "n" "g"     -> "n" "j"              || NotInAntL _ AnyAntR(["e"|"i"|"y"]);
#next: ng -> \co{ng} in all other cases
define NgReplace3   "n" "g"     -> WithAntR("\co", "n") WithAntR("\co", "g") || NotInAntL _;
#when ng is n\co{g}, alwyas \co{n} \co{g}.
#Don't need to check for being in an annotation cos that would imply a nested annotation
define NgReplace4   "n" WithAnt("\co", "g") -> WithAntR("\co", "n") WithAntR("\co", "g");

#Order is important here, NgReplace3 traps cases that fall through NgReplace2
define NgReplace NgReplace1 .o. NgReplace2 .o. NgReplace3 .o. NgReplace4;

#OK, let's do gh
#gh is silent everywhere
#before eliminating it, we should check if there is a vowel on LHS of us
#if so, (and it's not already annotated) we should annotate with \natpos
#This will allow step 3.7 to know that a stressed vowel here is in natural position
define GHMarkNat    [..] -> "\natpos" "{" "}" || [\EarlyVowel|SegBoundary] EarlyVowel _ "g" "h" ;
define GhReplace1   "g" "h"  -> 0 || NotInAntL _;
#\opq{gh} says should be schwa, but Jose reckons try a
define GhReplace2   WithAnt("\opq", "g" "h") -> "a";
define GhReplace GHMarkNat .o. GhReplace1 .o. GhReplace2;
#define GhReplace GhReplace1 .o. GhReplace2;

#wh:
#wh becomes \co{w} at begining of seg or when followed by consonant
define WhReplace1   "w" "h" @-> WithAntR("\co", "w") || SegBoundary _;
define WhReplace2   "w" "h" @-> WithAntR("\co", "w") || AnyAntL(EarlyConsonant) _ NotInAntR; #left is used for the consonant, so verify no trailing }
define WhReplace WhReplace1 .o. WhReplace2;

#wr:
#wr becomes r except after vowel
#Since we have a not rule rather than a yes rule, need to consider end-of-segment
define WrReplace    "w" "r" -> "r" || [\AnyAntL(EarlyVowel) | SegBoundary] _ NotInAntR;

#qu -> kw before aeiouy
define QuReplace    "q" "u" -> "k" "w" || NotInAntL _ AnyAntR([EarlyVowel | "y"]);

#gu:
#gu -> \co{g}w before aou
#I imply that \co{g}u should also be included here
define GuReplace1   ["g"|WithAnt("\co", "g")]  "u" @-> WithAntR("\co", "g") "w" || NotInAntL _ AnyAntR(["a"|"o"|"u"]);
#gu -> \co{g} before eiy
define GuReplace2   ["g"|WithAnt("\co", "g")] "u" @-> WithAntR("\co", "g") || NotInAntL _ AnyAntR(["e"|"i"|"y"]);

define GuReplace GuReplace1 .o. GuReplace2;

#ah etc
#h is silent between a vowel and a consonant
define AhReplace    "h" -> 0 || AnyAntL([EarlyVowel|"y"|"w"]) _ [AnyAntR(EarlyConsonant) | SegBoundary];

#A rule I add to handle C in phase 3.9
#We annotate c before e, i, and y
define CAnt "c" -> "\no" "{" ... "}" || NotInAntL _ AnyAnt(["e"|"i"|"y"]);
define GAnt "g" -> "\hvo" "{" ... "}" || NotInAntL _ AnyAnt(["e"|"i"|"y"]);
define NAnt "n" -> "\co" "{" ... "}" || NotInAntL _ [AnyAnt("k") | AnyAnt("c") AnyAnt(["a"|"o"|"u"|"w"]) | WithAnt("\co", "c")];

#wire everything up together!
define Phase33 NgReplace .o. GhReplace .o. WhReplace .o. WrReplace .o. QuReplace .o. GuReplace .o. AhReplace .o. CAnt .o. GAnt .o. NAnt;

