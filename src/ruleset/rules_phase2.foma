#Section 3.4: Indentify consonant groups
#Vowels are:
#   Unannotated aeiou
#   Anything with a vowel annotation
#   w/y if  before a consonant
#           at the end of a segment
#           part of a voewl digraph ay ey oy aw ew ow
#Consonants are:
#   bcdfghjklmnpqrstvxz
#   Anything with consonant annotation
#   w/y which is not vowel
#   u when qu gua guo guu

#because we can't spread regex context => accross transducer context ||
#we need to identify consonantness/vowelness of unannotated w, y, u
#tack on a @ after it if is a vowel and a # if it is a consonant
#only concerned when not in ant


define VowelLetter      ["a"|"e"|"i"|"o"|"u"];
define VowelWithAnt     WithAnt(VowelAnt, [\"}"]*);

define ConsonantLetter  ["b"|"c"|"d"|"f"|"g"|"h"|"j"|"k"|"l"|"m"|"n"|"p"|"q"|"r"|"s"|"t"|"v"|"x"|"z"];
define ConsonantWithAnt WithAnt(ConsonantAnt, [\"}"]*);

define PreGroupVowel    [VowelLetter | VowelWithAnt | WithAnt(["\st"|"\stst"], ["a"|"e"|"i"|"o"|"u"]+)];
define PreGroupConsonant [ConsonantLetter | ConsonantWithAnt];

#apply @# transforms
define WYBeforeCons     ["w"|"y"] -> ... "!@" || NotInAntL _ PreGroupConsonant;
define WYBeforeSegEnd   ["w"|"y"] -> ... "!@" || NotInAntL _ SegBoundary;
define WYVowelDigraph   ["w"|"y"] -> ... "!@" || NotInAntL ["a"|"e"|"o"] _ \["!@"|"!#"];
#y is also a vowel after a consonant
define YAfterConsonant  "y" -> ... "!@" || NotInAntL PreGroupConsonant _;
define WYConsonant      ["w"|"y"] -> ... "!#" || NotInAntL _ \"!@";
define WYMarkerTrans    WYBeforeCons .o. WYBeforeSegEnd .o. WYVowelDigraph .o. YAfterConsonant .o. WYConsonant;
define UMarkQU          "q" "u" -> ... "!#" || NotInAntL _;
define UMarkGUA         "g" "u" "a" -> "g" "u" "!#" "a" || NotInAntL _;
define UMarkGUO         "g" "u" "o" -> "g" "u" "!#" "o" || NotInAntL _;
define UMarkGUU         "g" "u" "u" -> "g" "u" "!#" "u" "!#" || NotInAntL _;
define UMarkVowel       "u" -> ... "!@" || NotInAntL _;
define UMarkerTrans     UMarkQU .o. UMarkGUA .o. UMarkGUU .o. UMarkGUO .o. UMarkVowel;
define MarkerAdd        WYMarkerTrans .o. UMarkerTrans;

#now remove U from this group, it is usually vowel annotated
define VowelLetter2     ["a"|"e"|"i"|"o"];

define VowelGroup       [VowelLetter2 | ? "!@" | VowelWithAnt | WithAnt(["\st"|"\stst"], ["a"|"e"|"i"|"o"|"u"]+)]+;
define ConsonantGroup   [ConsonantLetter | ? "!#" | ConsonantWithAnt]+;

define GroupUnitsMarkV  [..] @-> ",@" || ConsonantGroup _ VowelGroup;
define GroupUnitsMarkC  [..] @-> ",#" || VowelGroup _ ConsonantGroup;
define GroupUnitsMarkFirstV [..] @-> "@" || SegBoundary _ VowelGroup;
define GroupUnitsMarkFirstC [..] @-> "#" || SegBoundary _ ConsonantGroup;

define GroupUnits [GroupUnitsMarkV .o.  GroupUnitsMarkC] .o. [GroupUnitsMarkFirstV .o. GroupUnitsMarkFirstC];

#Now let's undo some damage (easier than avoiding in the first place)
#We put commas in annotations, this is bad
define UndoGroupingsInAnt [",@"|",#"] @> 0 || "{" [\"}"]* _ ?* "}";
define UndoMarkerAdd    ["!@"|"!#"] -> 0;
define Phase34 MarkerAdd .o. GroupUnits .o. UndoMarkerAdd .o. UndoGroupingsInAnt;


#Section 3.5: Identify vowel digraphs/units
#Match l-r pairs for digraphs and break them
#These rules actually all need to run at the same priority to work

define Natpos ["\natpos" "{" "}"];
define AllowedDigraphs ["a" "a" | "a" "e" | "a" "i" | "a" "y" | "a" "u" | "a" "w" | "e" "a" | "e" "e" |
                        "e" "i" | "e" "y" | "e" "u" | "e" "w" | "o" "a" | "o" "i" | "o" "y" | "o" "u" | "o" "w" |
                        "a" Natpos | "e" Natpos | "i" Natpos | "o" Natpos |"u" Natpos];
define VowelOrStress [WithAnt([[VowelAnt & \"\natpos"]|"\st"|"\stst"], [\"}"]*)];

#If we have natpos in the middle of allowed digraphs, trash it
define TrashNatpos Natpos -> 0 || "a" _ "a", "a" _ "e", "a" _ "i", "a" _ "y", "a" _ "u", "a" _ "w",
                                                "e" _ "a", "e" _ "e", "e" _ "i", "e" _ "y", "e" _ "u", "e" _ "w",
                                                "o" _ "a", "o" _ "i", "o" _ "y", "o" _ "u", "o" _ "w";

#for some reason foma/xfst is incredibly stupid. A ,, B doesn't do what one would expect
#if they're defined elsewhere. You actually need to literally include them like so
define DigraphWrite AllowedDigraphs -> ... ",@" // VowelUnitStartL _ \UnitBoundary #ne double comma pas
    ,,  "a" -> ... ",@" // VowelUnitStartL _ ["o"|VowelOrStress]
    ,,  "e" -> ... ",@" // VowelUnitStartL _ ["o"|VowelOrStress]
    ,,  "i" -> ... ",@" // VowelUnitStartL _ ["a"|"e"|"i"|"o"|"u"|"y"|"w"|VowelOrStress]
    ,,  "o" -> ... ",@" // VowelUnitStartL _ ["e"|VowelOrStress]
    ,,  "u" -> ... ",@" // VowelUnitStartL _ ["a"|"e"|"i"|"o"|"u"|"y"|"w"|VowelOrStress]
    #This rule not in the paper but i'm pretty sure no vowel digraph is formed in e.g. b,ye -> b,y,e
    ,,  ["y"|"w"] -> ... ",@" // VowelUnitStartL _ ["a"|"e"|"i"|"o"|"u"|"y"|"w"|VowelOrStress]
    ,,  [WithAnt(VowelAnt, [\"}"]*)|Natpos] -> ... ",@" // VowelUnitStartL _ \GroupBoundary;
    
define Phase35 TrashNatpos .o. DigraphWrite;

#Now we need to mark stresses.
#Section 3.6
define AssignPrimaryStAnt   [..] -> "'" || VowelUnitStartL _ [[\UnitBoundaryHard]+ & [$"\st" | $"$"]] UnitBoundaryHard;
define AssignSecondStAnt    [..] -> "''" || VowelUnitStartL _ [[\UnitBoundaryHard]+ & [$"\stst" | $"$$"]] UnitBoundaryHard;
define AssignStressAnts     AssignPrimaryStAnt .o. AssignSecondStAnt;
#There seems to be no easy way to do this in one pass
#Mark L/R of all stress annotations with !! then delete them i.e. a\st{bc}d -> a\st{!!bc!!}d -> abcd
define MarkStressAntDel     [\UnitBoundaryHard & \"}"]+ -> "!!" ... "!!" || ["\st"|"\stst"] "{" _ "}";
define DelMarkedStressAntOpen   ["\st"|"\stst"] "{" "!!" -> 0;
define DelMarkedStressAntClose  "!!" "}" -> 0;
define DelJoinedStressAnt       ["$"|"$$"] -> 0;
define DelStressAnt             MarkStressAntDel .o. DelMarkedStressAntOpen .o. DelMarkedStressAntClose .o. DelJoinedStressAnt;

#OK, now annotations are taken care of by having marked the ,# -> ,#'' type stress markers
#We assume a secondary stress two sylables to the left of a primary stress
#IFF there is not already a secondary stress annotation in segment
define InsSecondSt2Left     [..] -> "''" || SegBoundaryHard [\"''"]* VowelUnitStartLNS _ [\"''" & \VowelUnitStartLNS]* VowelUnitStartLNS [\"''" & \VowelUnitStartLNS]* VowelUnitStartLNS "'" [\"''"]* SegBoundaryHard;

#infer primary stress before these annotations
define InsPrimaryConsAnt    [..] -> "'" \\ SegBoundaryHard [\SegBoundaryHard & \"'"]* [VowelUnitStartLNS]  _ [\VowelUnitStartLNS & \ConsUnitStartL & \["'"|"''"]]* ConsUnitStartL 
                                            [\VowelUnitStartLNS & \ConsUnitStartL]* ["\hvo"|"\hno"|"\svo"|"\sno"] [\SegBoundaryHard & \"'"]* SegBoundaryHard;

#infer primary stress before these annotations
#define InsPrimaryConsAnt    [..] -> "'" \\ SegBoundaryHard [\SegBoundaryHard & \"'"]* [VowelUnitStartLNS & \[$."'"] & \[$."''"]]  _ [\VowelUnitStartLNS & \ConsUnitStartL]* ConsUnitStartL 
#                                            [\VowelUnitStartLNS & \ConsUnitStartL]* ["\hvo"|"\hno"|"\svo"|"\sno"] [\SegBoundaryHard & \"'"]* SegBoundaryHard;

#Insert a "separator" to make single-sylables stressed
define InsInitSeparator     [..] -> "->" " "|| .#. _ [\SegBoundaryHard]* .#.;
#Now use the segment stresses to stress the first unit in a segment unless something has already been done
define LPrimarySegStress    [..] -> "'" || SegBoundaryHard [\VowelUnitStartLNS & \SegBoundaryHard]* VowelUnitStartLNS _ [\SegBoundaryHard & \"'"]* " " ["<-"|"<<-"];
define RPrimarySegStress    [..] -> "'" || ["->"|"->>"] " " [\VowelUnitStartLNS & \SegBoundaryHard]* VowelUnitStartLNS _ [\SegBoundaryHard & \"'"]* SegBoundaryHard;
define LSecondSegStress     [..] -> "''" || SegBoundaryHard [\VowelUnitStartLNS & \SegBoundaryHard]* VowelUnitStartLNS _ [\SegBoundaryHard & \"''"]* " " "->>";
define RSecondSegStress     [..] -> "'" || "<<-" " " [\VowelUnitStartLNS & \SegBoundaryHard]* VowelUnitStartLNS _ [\SegBoundaryHard & \"''"]* SegBoundaryHard;
define SegmentStresses LPrimarySegStress .o. RPrimarySegStress .o. LSecondSegStress .o. RSecondSegStress;

#we can now define one segment marker to rule them all
define DeleteSegmentMarkers1 ["->"|"<-"|"-"|"->>"|"<<-"] -> "-" || ? _ ; #Don't match the artificial separator at the start
define DeleteSegmentMarkers2 [" "|"->"|"<-"|"-"|"->>"|"<<-"] -> 0 || .#. _;
define DeleteSegmentMarkers3 " " -> 0; #no need for spaces
define DeleteSegmentMarkers DeleteSegmentMarkers2 .o. DeleteSegmentMarkers1 .o. DeleteSegmentMarkers3;
#We also need to insert commas in the deleted positions i.e. @a <<- @b goes to @a,@b instead of @a@b
define RestoreCommas "@" -> ",@", "#" -> ",#" || \"-" _;


#If we dont' split this up we end up with a 64MB FSM
define Phase36a AssignStressAnts .o. DelStressAnt;
define Phase36b InsPrimaryConsAnt .o. InsSecondSt2Left; #This order because inferred primary/secondary can be combined
define Phase36c InsInitSeparator .o. SegmentStresses .o. DeleteSegmentMarkers; # .o. RestoreCommas;

